#if (defined(PARALLAXMAP) || defined(NORMALMAP_PARALLAX)) && defined(NORMALMAP)

  #ifdef POM_USE_TEX_GRAD
    #extension GL_EXT_gpu_shader4 : enable
  #endif

  // Adaptive in-shader level-of-detail system implementation. Compute the 
  // current mip level explicitly in the pixel shader and use this information 
  // to transition between different levels of detail from the full effect to 
  // simple bump mapping. See the above paper for more discussion of the approach
  // and its benefits. (see: Tatarchuk-POM-SI3D06.pdf)

  // Compute the current gradients:
  vec2 tmp_fTexCoordsPerSize = v_TexCoord * m_TextureSize;

  // Compute all 4 derivatives in x and y in a single instruction to optimize:
  vec4 tmp_sdx = dFdx(vec4(tmp_fTexCoordsPerSize, v_TexCoord));
  vec4 tmp_sdy = dFdy(vec4(tmp_fTexCoordsPerSize, v_TexCoord));

  vec2 tmp_dxSize = vec2(tmp_sdx.xy);
  vec2 tmp_dySize = vec2(tmp_sdy.xy);
  vec2 dx         = vec2(tmp_sdx.zw);
  vec2 dy         = vec2(tmp_sdy.zw);

  // Find min of change in u and v across quad: compute du and dv magnitude across quad
  vec2 tmp_dTexCoords = tmp_dxSize * tmp_dxSize + tmp_dySize * tmp_dySize;
  // Standard mipmapping uses max here
  float tmp_fMinTexCoordDelta = max(tmp_dTexCoords.x, tmp_dTexCoords.y); 
  // Compute the current mip level  (* 0.5 is effectively computing a square root before )
  float fMipLevel = max(0.5 * log2(tmp_fMinTexCoordDelta), 0);

  float getHeightSample(const in vec2 texCoord)
  {
    #if defined(PARALLAXMAP)
      return texture2D(m_ParallaxMap, texCoord).r;
    #elif defined(NORMALMAP_PARALLAX)
      return texture2D(m_NormalMap, texCoord).a;
    #endif
  }

  float getHeightSample(const in vec2 texCoord, const in float lod)
  {
    #if defined(PARALLAXMAP)
      return texture2DLod(m_ParallaxMap, texCoord, lod).r;
    #elif defined(NORMALMAP_PARALLAX)
      return texture2DLod(m_NormalMap, texCoord, lod).a;
    #endif
  }

  #ifdef GL_EXT_gpu_shader4
    float getHeightSample(const in vec2 texCoord, const in vec2 dx, in vec2 dy)
    {
      #if defined(PARALLAXMAP)
        return texture2DGrad(m_ParallaxMap, texCoord, dx, dy).r;
      #elif defined(NORMALMAP_PARALLAX)
        return texture2DGrad(m_NormalMap, texCoord, dy, dy).a;
      #endif
    }
  #endif

  float getPomHeightSample(const in vec2 texCoord)
  {
    #if (defined(POM_USE_TEX_GRAD) && defined(GL_EXT_gpu_shader4))
      return getHeightSample(texCoord, dx, dy);
    #elif defined(POM_USE_TEX_LOD)
      return getHeightSample(texCoord, fMipLevel);
    #else
      return getHeightSample(texCoord);
    #endif
  }

  const int g_nLODThreshold = 4;
  const bool g_bVisualizeLOD = false;

  void calculatePomTexCoord(const in vec3 wsView, const in vec3 wsNormal, inout vec2 pomTexCoord)
  {
    // Multiplier for visualizing the level of detail (see notes for 'nLODThreshold' variable
    // for how that is done visually)
    // vec4 cLODColoring = vec4(1.0, 1.0, 3.0, 1.0);

    float  fMipLevelInt;    // mip level integer portion
    float  fMipLevelFrac;   // mip level fractional amount for blending in between levels

    //===============================================//
    // Parallax occlusion mapping offset computation //
    //===============================================//

    // Utilize dynamic flow control to change the number of samples per ray 
    // depending on the viewing angle for the surface. Oblique angles require 
    // smaller step sizes to achieve more accurate precision for computing displacement.
    // We express the sampling rate as a linear function of the angle between 
    // the geometric normal and the view direction ray:
    int nNumSteps = int(mix(float(m_PomMaxSamples), float(m_PomMinSamples), dot(wsView, wsNormal)));

    // Intersect the view ray with the height field profile along the direction of
    // the parallax offset ray (computed in the vertex shader. Note that the code is
    // designed specifically to take advantage of the dynamic flow control constructs
    // in HLSL and is very sensitive to specific syntax. When converting to other examples,
    // if still want to use dynamic flow control in the resulting assembly shader,
    // care must be applied.
    // 
    // In the below steps we approximate the height field profile as piecewise linear
    // curve. We find the pair of endpoints between which the intersection between the 
    // height field profile and the view ray is found and then compute line segment
    // intersection for the view ray and the line segment formed by the two endpoints.
    // This intersection is the displacement offset from the original texture coordinate.
    // See the above paper for more details about the process and derivation.

    float fCurrHeight = 0.0;
    float fStepSize   = 1.0 / float(nNumSteps);
    float fPrevHeight = 1.0;
    float fNextHeight = 0.0;

    int    nStepIndex = 0;
    bool   bCondition = true;

    vec2   vTexOffsetPerStep = fStepSize * v_tsParallaxOffset;
    vec2   vTexCurrentOffset = v_TexCoord;
    float  fCurrentBound     = 1.0;
    float  fParallaxAmount   = 0.0;

    vec2   pt1 = vec2(0.0);
    vec2   pt2 = vec2(0.0);

    vec2   texOffset2 = vec2(0.0);

    while (nStepIndex < nNumSteps)
    {
      vTexCurrentOffset -= vTexOffsetPerStep;

      // Sample height map which in this case is stored in the alpha channel of the normal map:
      fCurrHeight = getPomHeightSample(vTexCurrentOffset);

      fCurrentBound -= fStepSize;

      if (fCurrHeight > fCurrentBound)
      {   
        pt1 = vec2(fCurrentBound, fCurrHeight);
        pt2 = vec2(fCurrentBound + fStepSize, fPrevHeight);

        texOffset2 = vTexCurrentOffset - vTexOffsetPerStep;

        nStepIndex = nNumSteps + 1;
        fPrevHeight = fCurrHeight;
      }
      else
      {
        nStepIndex++;
        fPrevHeight = fCurrHeight;
      }
    }   

    float fDelta2 = pt2.x - pt2.y;
    float fDelta1 = pt1.x - pt1.y;

    float fDenominator = fDelta2 - fDelta1;

    // SM 3.0 requires a check for divide by zero, since that operation will generate
    // an 'Inf' number instead of 0, as previous models (conveniently) did:
    if (fDenominator == 0.0f)
    {
      fParallaxAmount = 0.0f;
    }
    else
    {
      fParallaxAmount = (pt1.x * fDelta2 - pt2.x * fDelta1) / fDenominator;
    }

    vec2 vParallaxOffset = v_tsParallaxOffset * (1.0 - fParallaxAmount);

    // The computed texture offset for the displaced point on the pseudo-extruded surface:
    vec2 texSampleBase = v_TexCoord - vParallaxOffset;
    pomTexCoord = texSampleBase;

    // Lerp to bump mapping only if we are in between, transition section:

    // cLODColoring = vec4(1.0, 1.0, 1.0, 1.0);

    if (fMipLevel > float(g_nLODThreshold - 1))
    {
      // Lerp based on the fractional part:
      // fMipLevelFrac = modf(fMipLevel, fMipLevelInt); // needs GLSL130
      fMipLevelFrac = mod(fMipLevel, 1.0);
      fMipLevelInt = floor(fMipLevel);

      // if (g_bVisualizeLOD)
      // {
      //   // For visualizing: lerping from regular POM-resulted color through blue color for transition layer:
      //   cLODColoring = vec4(1.0, 1.0, max(1.0, 2.0 * fMipLevelFrac), 1.0);
      // }

      // Lerp the texture coordinate from parallax occlusion mapped coordinate to bump mapping
      // smoothly based on the current mip level:
      pomTexCoord = mix(texSampleBase, v_TexCoord, fMipLevelFrac);
    }
  }

  void addPomShadow(const in vec3 tsLight, const in vec2 pomTexCoord, inout float pomShadowSum)
  {
    vec2 vLightRayTS = tsLight.xy * m_ParallaxHeight;

    // Compute the soft blurry shadows taking into account self-occlusion for 
    // features of the height field:
    float sh0 =  getPomHeightSample(pomTexCoord);
    float shA = (getPomHeightSample(pomTexCoord + vLightRayTS * 0.88) - sh0 - 0.88) *  1.0 * m_PomShadowSoftening;
    float sh9 = (getPomHeightSample(pomTexCoord + vLightRayTS * 0.77) - sh0 - 0.77) *  2.0 * m_PomShadowSoftening;
    float sh8 = (getPomHeightSample(pomTexCoord + vLightRayTS * 0.66) - sh0 - 0.66) *  4.0 * m_PomShadowSoftening;
    float sh7 = (getPomHeightSample(pomTexCoord + vLightRayTS * 0.55) - sh0 - 0.55) *  6.0 * m_PomShadowSoftening;
    float sh6 = (getPomHeightSample(pomTexCoord + vLightRayTS * 0.44) - sh0 - 0.44) *  8.0 * m_PomShadowSoftening;
    float sh5 = (getPomHeightSample(pomTexCoord + vLightRayTS * 0.33) - sh0 - 0.33) * 10.0 * m_PomShadowSoftening;
    float sh4 = (getPomHeightSample(pomTexCoord + vLightRayTS * 0.22) - sh0 - 0.22) * 12.0 * m_PomShadowSoftening;

    // Compute the actual shadow strength:
    float fOcclusionShadow = 1.0 - max(max(max(max(max(max(shA, sh9), sh8), sh7), sh6), sh5), sh4);

    // The previous computation overbrightens the image, let's adjust for that:
    fOcclusionShadow = fOcclusionShadow * 0.4 + 0.4;
    pomShadowSum *= fOcclusionShadow;
  }

  void calculatePom(const in vec3 wsView, const in vec3 wsNormal, const in vec3 tsLight, out vec2 pomTexCoord, out float pomShadow)
  {
    // Start the current sample located at the input texture coordinate, which would correspond
    // to computing a bump mapping result:
    pomTexCoord = v_TexCoord;
    pomShadow = 1.0;

    // Multiplier for visualizing the level of detail (see notes for 'nLODThreshold' variable
    // for how that is done visually)
    // vec4 cLODColoring = vec4(1.0, 1.0, 3.0, 1.0);

    if (fMipLevel <= float(g_nLODThreshold))
    {
      calculatePomTexCoord(wsView, wsNormal, pomTexCoord);
      addPomShadow(tsLight, pomTexCoord, pomShadow);
    }
  }
#endif
